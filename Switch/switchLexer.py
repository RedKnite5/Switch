# Generated from switch.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,20,130,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,1,0,5,0,50,8,0,10,0,12,0,53,
        9,0,1,0,1,0,1,0,5,0,58,8,0,10,0,12,0,61,9,0,1,0,1,0,5,0,65,8,0,10,
        0,12,0,68,9,0,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,
        1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        3,19,110,8,19,1,19,1,19,1,19,5,19,115,8,19,10,19,12,19,118,9,19,
        1,20,1,20,1,20,1,20,1,21,1,21,1,22,4,22,127,8,22,11,22,12,22,128,
        0,0,23,1,1,3,2,5,3,7,4,9,5,11,0,13,0,15,6,17,7,19,8,21,9,23,10,25,
        11,27,12,29,13,31,14,33,15,35,16,37,17,39,18,41,19,43,0,45,20,1,
        0,5,3,0,9,10,13,13,32,32,2,0,79,79,111,111,2,0,90,90,122,122,5,0,
        103,103,106,106,109,109,112,113,116,118,4,0,33,47,58,64,91,96,123,
        126,134,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,45,1,0,
        0,0,1,47,1,0,0,0,3,69,1,0,0,0,5,73,1,0,0,0,7,75,1,0,0,0,9,77,1,0,
        0,0,11,79,1,0,0,0,13,81,1,0,0,0,15,83,1,0,0,0,17,85,1,0,0,0,19,87,
        1,0,0,0,21,89,1,0,0,0,23,91,1,0,0,0,25,93,1,0,0,0,27,95,1,0,0,0,
        29,97,1,0,0,0,31,99,1,0,0,0,33,101,1,0,0,0,35,103,1,0,0,0,37,105,
        1,0,0,0,39,109,1,0,0,0,41,119,1,0,0,0,43,123,1,0,0,0,45,126,1,0,
        0,0,47,51,3,35,17,0,48,50,3,3,1,0,49,48,1,0,0,0,50,53,1,0,0,0,51,
        49,1,0,0,0,51,52,1,0,0,0,52,54,1,0,0,0,53,51,1,0,0,0,54,66,3,39,
        19,0,55,59,3,37,18,0,56,58,3,3,1,0,57,56,1,0,0,0,58,61,1,0,0,0,59,
        57,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,59,1,0,0,0,62,63,3,39,
        19,0,63,65,1,0,0,0,64,55,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,
        67,1,0,0,0,67,2,1,0,0,0,68,66,1,0,0,0,69,70,7,0,0,0,70,71,1,0,0,
        0,71,72,6,1,0,0,72,4,1,0,0,0,73,74,5,76,0,0,74,6,1,0,0,0,75,76,5,
        110,0,0,76,8,1,0,0,0,77,78,5,108,0,0,78,10,1,0,0,0,79,80,7,1,0,0,
        80,12,1,0,0,0,81,82,7,2,0,0,82,14,1,0,0,0,83,84,7,3,0,0,84,16,1,
        0,0,0,85,86,5,101,0,0,86,18,1,0,0,0,87,88,5,105,0,0,88,20,1,0,0,
        0,89,90,5,99,0,0,90,22,1,0,0,0,91,92,5,66,0,0,92,24,1,0,0,0,93,94,
        5,87,0,0,94,26,1,0,0,0,95,96,5,119,0,0,96,28,1,0,0,0,97,98,5,70,
        0,0,98,30,1,0,0,0,99,100,5,102,0,0,100,32,1,0,0,0,101,102,5,82,0,
        0,102,34,1,0,0,0,103,104,5,83,0,0,104,36,1,0,0,0,105,106,5,115,0,
        0,106,38,1,0,0,0,107,110,3,11,5,0,108,110,3,13,6,0,109,107,1,0,0,
        0,109,108,1,0,0,0,110,116,1,0,0,0,111,115,3,11,5,0,112,115,3,13,
        6,0,113,115,3,3,1,0,114,111,1,0,0,0,114,112,1,0,0,0,114,113,1,0,
        0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,40,1,0,0,
        0,118,116,1,0,0,0,119,120,3,39,19,0,120,121,5,100,0,0,121,122,3,
        39,19,0,122,42,1,0,0,0,123,124,7,4,0,0,124,44,1,0,0,0,125,127,3,
        43,21,0,126,125,1,0,0,0,127,128,1,0,0,0,128,126,1,0,0,0,128,129,
        1,0,0,0,129,46,1,0,0,0,8,0,51,59,66,109,114,116,128,1,6,0,0
    ]

class switchLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    STRING = 1
    WHITESPACE = 2
    ENDLINE = 3
    ARG_DELIM = 4
    END_CALL = 5
    MATH_OPS = 6
    ASSIGNMENT_OP = 7
    ACCESS_OP = 8
    CALL_OP = 9
    BLOCK_DELIM = 10
    WHILE_LOOP_DELIM = 11
    WHILE_LOOP_END = 12
    FUNCTION_DELIM = 13
    FUNCTION_END = 14
    FUNCTION_RETURN = 15
    STRING_START = 16
    NEXT_CHAR = 17
    INT = 18
    FLOAT = 19
    NAME = 20

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'L'", "'n'", "'l'", "'e'", "'i'", "'c'", "'B'", "'W'", "'w'", 
            "'F'", "'f'", "'R'", "'S'", "'s'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "WHITESPACE", "ENDLINE", "ARG_DELIM", "END_CALL", 
            "MATH_OPS", "ASSIGNMENT_OP", "ACCESS_OP", "CALL_OP", "BLOCK_DELIM", 
            "WHILE_LOOP_DELIM", "WHILE_LOOP_END", "FUNCTION_DELIM", "FUNCTION_END", 
            "FUNCTION_RETURN", "STRING_START", "NEXT_CHAR", "INT", "FLOAT", 
            "NAME" ]

    ruleNames = [ "STRING", "WHITESPACE", "ENDLINE", "ARG_DELIM", "END_CALL", 
                  "ONE", "ZERO", "MATH_OPS", "ASSIGNMENT_OP", "ACCESS_OP", 
                  "CALL_OP", "BLOCK_DELIM", "WHILE_LOOP_DELIM", "WHILE_LOOP_END", 
                  "FUNCTION_DELIM", "FUNCTION_END", "FUNCTION_RETURN", "STRING_START", 
                  "NEXT_CHAR", "INT", "FLOAT", "CHAR", "NAME" ]

    grammarFileName = "switch.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


